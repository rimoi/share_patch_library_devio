--- a/vendor/devio/pipedrive/src/Http/PipedriveClient.php	2022-08-18 22:21:04.894463831 +0200
+++ b/vendor/devio/pipedrive/src/Http/PipedriveClient.php	2022-08-18 22:29:22.905053533 +0200
@@ -9,26 +9,11 @@
 
 class PipedriveClient implements Client
 {
-    /**
-     * The Guzzle client instance.
-     *
-     * @var Client
-     */
     protected $client;
 
-    /**
-     * Oauth flag
-     *
-     * @var bool.
-     */
     protected $isOauth = false;
 
-    /**
-     * GuzzleClient constructor.
-     *
-     * @param $url
-     * @param $token
-     */
+
     public function __construct($url, $credentials)
     {
         list($headers, $query) = [[], []];
@@ -50,14 +35,7 @@
         );
     }
 
-    /**
-     * Create an OAuth client.
-     *
-     * @param $url
-     * @param $storage
-     * @param $pipedrive
-     * @return PipedriveClient
-     */
+
     public static function OAuth($url, $storage, $pipedrive)
     {
         $token = $storage->getToken();
@@ -71,13 +49,6 @@
         return new self($url, $token);
     }
 
-    /**
-     * Perform a GET request.
-     *
-     * @param       $url
-     * @param array $parameters
-     * @return Response
-     */
     public function get($url, $parameters = [])
     {
         $options = $this->getClient()
@@ -90,13 +61,6 @@
         return $this->execute(new GuzzleRequest('GET', $url), $options);
     }
 
-    /**
-     * Perform a POST request.
-     *
-     * @param $url
-     * @param array $parameters
-     * @return Response
-     */
     public function post($url, $parameters = [])
     {
         $request = new GuzzleRequest('POST', $url);
@@ -118,12 +82,7 @@
         return $this->execute($request, [$form => $parameters]);
     }
 
-    /**
-     * Convert the parameters into a multipart structure.
-     *
-     * @param array $parameters
-     * @return array
-     */
+
     protected function multipart(array $parameters)
     {
         if (! ($file = $parameters['file']) instanceof \SplFileInfo) {
@@ -144,13 +103,6 @@
         return $result;
     }
 
-    /**
-     * Perform a PUT request.
-     *
-     * @param       $url
-     * @param array $parameters
-     * @return Response
-     */
     public function put($url, $parameters = [])
     {
         $request = new GuzzleRequest('PUT', $url);
@@ -158,13 +110,6 @@
         return $this->execute($request, ['form_params' => $parameters]);
     }
 
-    /**
-     * Perform a DELETE request.
-     *
-     * @param       $url
-     * @param array $parameters
-     * @return Response
-     */
     public function delete($url, $parameters = [])
     {
         $request = new GuzzleRequest('DELETE', $url);
@@ -172,14 +117,6 @@
         return $this->execute($request, ['form_params' => $parameters]);
     }
 
-    /**
-     * Execute the request and returns the Response object.
-     *
-     * @param GuzzleRequest $request
-     * @param array $options
-     * @param null $client
-     * @return Response
-     */
     protected function execute(GuzzleRequest $request, array $options = [], $client = null)
     {
         $client = $client ?: $this->getClient();
@@ -202,19 +139,33 @@
         );
     }
 
-    /**
-     * @inheritDoc
-     */
+    public function patch($url, $parameters = [])
+    {
+        $request = new GuzzleRequest('PATCH', $url);
+        $form = 'form_params';
+
+        // If any file key is found, we will assume we have to convert the data
+        // into the multipart array structure. Otherwise, we will perform the
+        // request as usual using the form_params with the given parameters.
+        if (isset($parameters['file'])) {
+            $form = 'multipart';
+            $parameters = $this->multipart($parameters);
+        }
+
+        if (isset($parameters['json'])) {
+            $form = RequestOptions::JSON;
+            $parameters = array_except($parameters, RequestOptions::JSON);
+        }
+
+        return $this->execute($request, [$form => $parameters]);
+    }
+
+
     public function isOauth()
     {
         return $this->isOauth;
     }
 
-    /**
-     * Return the client.
-     *
-     * @return Client
-     */
     public function getClient()
     {
         return $this->client;
